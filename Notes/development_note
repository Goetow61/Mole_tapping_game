◆シーン(3シーン)
1. タイトル [TOP]
2. ゲーム本体/結果  [MAIN]
3. 履歴 [HISTORY]

◆オブジェクト
  全体--
    0. 全体通してBGM

  タイトル--
    1. ゲームタイトル
    2. UI:ゲームを始めるボタン
    3. UI:履歴を開くボタン

  ゲーム本体--
    1. モグラの穴(6個)
    2. UI:モグラ(3体)
    3. 制限時間時計
    (結果)
      4. 得点
      5. UI:タイトルに戻るボタン
      6. UI:もう一回ボタン

  履歴--
    1. 日付と得点(あるだけ全部)

◆コントローラスクリプト
  2. 制限時間時計

◆ジェネレータスクリプト
  0. 穴の複製
  1. モグラ(3体)
  7. 日付と得点(あるだけ全部)

◆UIスクリプト
  1. UI:ゲームを始めるボタン
  2. UI:履歴を開くボタン
  -. モグラ(3体)
  3. 制限時間時計
  4. 得点
  5. UI:タイトルに戻るボタン
  6. UI:もう一回ボタン

・消えたら困るものにはアンカーをつける
・モグラのランダム生成。既に生成済みの穴をどうやって分ける？
穴にタグを設定する。
HolePrefabを設定して、モグラ生成時にUntaggedに切り替え。
モグラDestroy時に、親要素を参照しHolePrefabタグに戻す。
・スコアをカウントする
  スコアテキストにScoreControllerをアタッチして記録
  MoleControllerに、Score = GameObject.Find("Score")。Score.GetComponent<ScoreController>().CountUp(1)を追加
  同様にTimeControllerに、public GameObject Score宣言。Score.GetComponent<ScoreController>().SetDateTime()を追加(ついでに変数名変更countTime→timer)
  TimerのScoreにスコアテキストを設定
  ついでにMoleGeneratorに、public GameObject Timer宣言。Timer.GetComponent<TimerController>().timerを追加
  MoleGeneratorのTimerにタイマーテキストを設定
  デバッグ　親オブジェクトがDeActiveのままではScoreオブジェクトに変数を格納できないので、空オブジェクト作成に切り替え。
・プレイ履歴を表示する
  CSV読込スクリプトを作成。日付降順でデバッグ出力してみる。
・プレイ履歴にスコアソートをつける
  ジャグ配列であればライブラリの機能で簡単にソートできるっぽい。
  単体の実装は気持ち悪いので、いっそのこと日付降順も含めて直す。
  見出しをボタンにする。見出しのタグをascending, descendingに設定で切り替える。両方合わせてのソートはしない。